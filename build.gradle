buildscript {
	ext {
		log4jVersion = '1.2.17'
		springBootVersion = '2.6.7'
		eclipsePersistenceVersion = '2.1.1'
		kryoVersion = '4.0.2'
		springCloudClusterVersion = '1.0.2.RELEASE'
		springShellVersion = '1.1.0.RELEASE'
		eclipseEmfXmiVersion = '2.11.1-v20150805-0538'
		eclipseUml2CommonVersion = '2.0.0-v20140602-0749'
		eclipseEmfCommonVersion = '2.11.0-v20150805-0538'
		eclipseUml2TypesVersion = '2.0.0-v20140602-0749'
		eclipseEmfEcoreVersion = '2.11.1-v20150805-0538'
		eclipseUml2UmlVersion = '5.0.0-v20140602-0749'
		curatorVersion = '2.11.1'
		docResourcesVersion = '0.2.5'
		awaitilityVersion = '3.1.6'
		reactorBlockHoundVersion = '1.0.4.RELEASE'
	}
	repositories {
		gradlePluginPortal()
		maven { url 'https://repo.spring.io/plugins-snapshot' }
	}
	dependencies {
		classpath("io.spring.gradle:propdeps-plugin:0.0.8-SNAPSHOT")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

plugins {
	id 'org.asciidoctor.jvm.convert' version '3.1.0'
	id 'org.asciidoctor.jvm.pdf' version '3.1.0'
}

def recipeProjects() {
	subprojects.findAll { project ->
		project.name.contains('spring-statemachine-recipes') && project.name != 'spring-statemachine-recipes-common'
	}
}

def sampleProjects() {
	subprojects.findAll { project ->
		project.name.contains('spring-statemachine-samples') && project.name != 'spring-statemachine-samples-common'
	}
}

def getResolvedVersionOf(dependency) {
	// used for resolving version to docs
	return configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.findAll { it.moduleName == dependency }[0].moduleVersion
}

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'idea'
	// apply plugin: 'propdeps'

	if (System.env.TRAVIS == 'true') {
		tasks.withType(GroovyCompile) {
			groovyOptions.fork = false
		}
		tasks.withType(Test) {
			maxParallelForks = 1
			minHeapSize = '256m'
			maxHeapSize = '384m'
		}
	}

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	group = 'org.springframework.statemachine'

	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:deprecation']

	repositories {
		mavenCentral()
		maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
		maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'}
		maven { url 'https://repo.spring.io/libs-snapshot' }
		maven { url 'https://repo.spring.io/libs-release' }
		maven { url 'https://repo.spring.io/libs-milestone' }
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
		}
		dependencies {
			dependency "log4j:log4j:$log4jVersion"
			dependency "org.eclipse.persistence:javax.persistence:$eclipsePersistenceVersion"
			dependency "com.esotericsoftware:kryo-shaded:$kryoVersion"
			dependency "org.springframework.shell:spring-shell:$springShellVersion"
			dependency "org.eclipse.uml2:uml:$eclipseUml2UmlVersion"
			dependency "org.eclipse.uml2:types:$eclipseUml2TypesVersion"
			dependency "org.eclipse.uml2:common:$eclipseUml2CommonVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.ecore.xmi:$eclipseEmfXmiVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.ecore:$eclipseEmfEcoreVersion"
			dependency "org.eclipse.emf:org.eclipse.emf.common:$eclipseEmfCommonVersion"
			dependency "org.apache.curator:curator-recipes:$curatorVersion"
			dependency "org.apache.curator:curator-test:$curatorVersion"
			dependency "org.awaitility:awaitility:$awaitilityVersion"
			dependency "io.projectreactor.tools:blockhound:$reactorBlockHoundVersion"
			dependency "io.projectreactor.tools:blockhound-junit-platform:$reactorBlockHoundVersion"
		}
	}

	task integrationTest(type: Test) {
		include '**/*IntegrationTests.*'
	}

	test {
		useJUnitPlatform {
			if (!project.hasProperty('statemachineIncludeTags') && !project.hasProperty('statemachineExcludeTags')) {
				excludeTags = ['smoke']
			} else {
				if (project.hasProperty('statemachineIncludeTags') && statemachineIncludeTags.size() > 0) {
						includeTags = statemachineIncludeTags.split(',')
				}
				if (project.hasProperty('statemachineExcludeTags') && statemachineExcludeTags.size() > 0) {
						excludeTags = statemachineExcludeTags.split(',')
				}
			}
		}
		exclude '**/*IntegrationTests.*'
		if (project.hasProperty('statemachineTestResults') && statemachineTestResults.toBoolean()) {
			afterSuite { desc, result ->
				if (!desc.parent) {
					def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
					def startItem = '|  ', endItem = '  |'
					def repeatLength = startItem.length() + output.length() + endItem.length()
					println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
				}
			}
		}
	}
}

project('spring-statemachine-core') {
	description = 'Spring State Machine Core'

	configurations {
		testArtifacts
	}

	dependencies {
		compile 'org.springframework:spring-tx'
		compile 'org.springframework:spring-messaging'
		compile 'io.projectreactor:reactor-core'
		// compile 'org.springframework.security:spring-security-core'

		testCompile 'org.springframework:spring-test'
		testCompile 'org.springframework:spring-web'
		testCompile 'org.springframework:spring-webmvc'
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.apache.tomcat.embed:tomcat-embed-core'
		testCompile('org.mockito:mockito-core') { dep ->
			exclude group: 'org.hamcrest'
		}
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
		testCompile 'org.assertj:assertj-core'
		testCompile 'org.springframework.security:spring-security-config'
		testCompile 'org.springframework.security:spring-security-test'
		testCompile 'javax.servlet:javax.servlet-api'
		testCompile 'org.awaitility:awaitility'
		testRuntime 'org.apache.logging.log4j:log4j-core'
	}

	task testJar(type: Jar) {
		classifier = 'tests'
		from sourceSets.test.output
	}

	artifacts {
		testArtifacts testJar
	}
}

project('spring-statemachine-autoconfigure') {
	description = 'Spring State Machine Boot Autoconfigure'

	dependencies {
		compile project(':spring-statemachine-core')
		compile 'org.springframework.boot:spring-boot-autoconfigure'
		compile 'org.springframework.boot:spring-boot-actuator-autoconfigure'
		compile 'org.springframework.boot:spring-boot-actuator'
		compile project(':spring-statemachine-data-common:spring-statemachine-data-jpa')
		compile project(':spring-statemachine-data-common:spring-statemachine-data-redis')
		compile project(':spring-statemachine-data-common:spring-statemachine-data-mongodb')
		compile 'org.springframework.boot:spring-boot-autoconfigure-processor'
		compile 'io.micrometer:micrometer-core'
		compile 'org.eclipse.persistence:javax.persistence'
		compile 'org.springframework.boot:spring-boot-starter-data-jpa'
		compile 'org.springframework.boot:spring-boot-starter-data-redis'
		compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
		testRuntime 'com.h2database:h2'
		testCompile 'org.springframework.boot:spring-boot-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
	}
}

project('spring-statemachine-test') {
	description = "Spring State Machine Test"

	dependencies {
		compile 'org.springframework:spring-context'
		compile project(':spring-statemachine-core')
		compile 'org.springframework:spring-test'
		compile 'org.hamcrest:hamcrest-core'
		compile 'org.hamcrest:hamcrest-library'
		compile 'org.assertj:assertj-core'
		compile 'junit:junit'
		compile 'org.junit.jupiter:junit-jupiter-api'
		compile 'org.junit.vintage:junit-vintage-engine'
		testCompile('org.mockito:mockito-core') { dep ->
			exclude group: 'org.hamcrest'
		}
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
	}
}

project('spring-statemachine-kryo') {
	description = 'Spring State Machine Kryo'

	dependencies {
		compile project(':spring-statemachine-core')
		compile 'com.esotericsoftware:kryo-shaded'

		testCompile (project(':spring-statemachine-test')) { dep ->
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
		testRuntime 'org.apache.logging.log4j:log4j-core'
	}
}

project('spring-statemachine-zookeeper') {
	description = 'Spring State Machine Zookeeper'

	dependencies {
		compile 'org.springframework:spring-context'
		compile project(':spring-statemachine-core')
		compile project(':spring-statemachine-kryo')
		compile 'org.apache.curator:curator-recipes'
		// github.com/spring-gradle-plugins/dependency-management-plugin/issues/136
		runtime 'log4j:log4j'

		testCompile (project(':spring-statemachine-test')) { dep ->
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testCompile 'org.apache.curator:curator-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
		testRuntime 'org.apache.logging.log4j:log4j-core'
	}
}

project('spring-statemachine-data-common') {
	configurations {
		testArtifacts.extendsFrom testRuntime
	}
	dependencies {
		compile project(':spring-statemachine-core')
		compile project(':spring-statemachine-kryo')
		compile 'org.springframework.data:spring-data-commons'
		compile 'org.springframework.security:spring-security-core'
		compile 'com.fasterxml.jackson.core:jackson-core'
		compile 'com.fasterxml.jackson.core:jackson-databind'
		testCompile (project(':spring-statemachine-test')) { dep ->
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.springframework.boot:spring-boot-starter-test'
		testRuntime 'org.springframework.boot:spring-boot-starter-web'
	}
	task testJar(type: Jar) {
		classifier = 'tests'
		from sourceSets.test.output
	}
	artifacts {
		testArtifacts testJar
	}
}

project('spring-statemachine-cluster') {
	description = 'Spring State Machine Cluster'

	dependencies {
		compile project(':spring-statemachine-zookeeper')
		compile 'org.springframework.integration:spring-integration-zookeeper'

		testCompile (project(':spring-statemachine-test')) { dep ->
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testCompile 'org.apache.curator:curator-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
		testRuntime 'org.apache.logging.log4j:log4j-core'
	}
}

project('spring-statemachine-uml') {
	description = 'Spring State Machine Uml'

	dependencies {
		compile project(':spring-statemachine-core')
		compile 'org.springframework.security:spring-security-core'

		// these eclipse maven deps are simply broken
		compile('org.eclipse.uml2:uml') { dep ->
			exclude group: 'org.eclipse.core', module: 'runtime'
			exclude group: 'org.eclipse.emf', module: 'ecore'
			exclude group: 'org.eclipse.emf.ecore', module: 'xmi'
			exclude group: 'org.eclipse.emf.mapping', module: 'ecore2xml'
			exclude group: 'org.eclipse.uml2', module: 'common'
			exclude group: 'org.eclipse.uml2', module: 'types'
		}
		compile('org.eclipse.uml2:types') { dep ->
			exclude group: 'org.eclipse.core', module: 'runtime'
			exclude group: 'org.eclipse.emf', module: 'ecore'
			exclude group: 'org.eclipse.uml2', module: 'common'
		}
		compile('org.eclipse.uml2:common') { dep ->
			exclude group: 'org.eclipse.core', module: 'runtime'
			exclude group: 'org.eclipse.emf', module: 'ecore'
		}
		compile 'org.eclipse.emf:org.eclipse.emf.ecore.xmi'
		compile 'org.eclipse.emf:org.eclipse.emf.ecore'
		compile 'org.eclipse.emf:org.eclipse.emf.common'
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
		testCompile 'org.awaitility:awaitility'
		testRuntime 'org.apache.logging.log4j:log4j-core'
	}
}

project('spring-statemachine-build-tests') {
	description = 'Spring State Machine Build Tests'

	dependencies {
		testCompile project(':spring-statemachine-uml')
		testCompile project(':spring-statemachine-test')
		testCompile project(':spring-statemachine-data-common:spring-statemachine-data-jpa')
		testCompile project(':spring-statemachine-data-common:spring-statemachine-data-redis')
		testCompile project(':spring-statemachine-data-common:spring-statemachine-data-mongodb')
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.apache.commons:commons-pool2'
		testRuntime 'org.springframework.boot:spring-boot-starter-data-mongodb'
		testRuntime 'org.springframework.boot:spring-boot-starter-data-redis'
		testRuntime 'redis.clients:jedis'
		testCompile 'org.springframework.boot:spring-boot-starter-data-jpa'
		testCompile 'com.h2database:h2'
		testCompile 'org.springframework.boot:spring-boot-starter'
		testCompile 'org.springframework:spring-test'
	}
}

configure(recipeProjects()) {
	dependencies {
		compile project(':spring-statemachine-recipes-common')
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
	}
}

project('spring-statemachine-recipes-common') {
	dependencies {
		compile 'org.springframework:spring-context'
		compile project(':spring-statemachine-core')
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
		testCompile 'io.projectreactor:reactor-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
	}
}

project('spring-statemachine-bom') {
	description = 'Spring Statemachine (Bill of Materials)'

	dependencyManagement {
		generatedPomCustomization {
			enabled = false
		}
	}

	configurations.archives.artifacts.clear()
	artifacts {
		// work around GRADLE-2406 by attaching text artifact
		archives(file('spring-statemachine-bom.txt'))
	}
}

project('spring-statemachine-starter') {
	description = 'Spring Statemachine Starter'
	dependencies {
		compile project(':spring-statemachine-autoconfigure')
		compile 'org.springframework.boot:spring-boot-starter'
	}
}

configure(sampleProjects()) {
	apply plugin: 'org.springframework.boot'
	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}
	dependencies {
		compile project(':spring-statemachine-core')
		compile 'org.springframework:spring-context-support'
		testCompile('org.mockito:mockito-core') { dep ->
			exclude group: 'org.hamcrest'
		}
		testCompile (project(':spring-statemachine-test')) { dep ->
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testCompile 'org.springframework.boot:spring-boot-test'
		testCompile 'org.springframework:spring-test'
		testCompile("org.junit.jupiter:junit-jupiter-api")
		testCompile("org.junit.jupiter:junit-jupiter-engine")
	}
	build.dependsOn bootJar

	artifacts {
		archives bootJar
	}
}

project('spring-statemachine-samples-common') {
	dependencies {
		compile project(':spring-statemachine-core')
		compile 'org.springframework.shell:spring-shell'
		compile 'org.springframework.boot:spring-boot-starter'
		testCompile project(path:':spring-statemachine-core', configuration:'testArtifacts')
	}
}

